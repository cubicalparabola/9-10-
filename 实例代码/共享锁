#include <iostream> // 引入 iostream 库，用于输入输出操作
#include <thread> // 引入 thread 库，用于多线程编程
#include <shared_mutex> // 引入 shared_mutex 库，用于线程同步

using namespace std; // 使用标准命名空间

shared_mutex sharedMutex; // 定义一个共享互斥量
int sharedData = 0; // 定义一个共享数据

void Reader() // 定义一个函数，表示读者的操作
{
    shared_lock<shared_mutex> lock(sharedMutex); // 获取共享锁
    cout << "Reader: " << sharedData << endl; // 输出 "Reader: " 和共享数据的值
}

void Writer() // 定义一个函数，表示写者的操作
{
    unique_lock<shared_mutex> lock(sharedMutex); // 获取独占锁
    ++sharedData; // 增加共享数据的值
    cout << "Writer: " << sharedData << endl; // 输出 "Writer: " 和共享数据的值
}

int main() // 主函数
{
    thread t1(Reader); // 创建一个新线程 t1，执行 Reader 函数
    thread t2(Writer); // 创建一个新线程 t2，执行 Writer 函数
    thread t3(Reader); // 创建一个新线程 t3，执行 Reader 函数

    t1.join(); // 等待 t1 线程结束
    t2.join(); // 等待 t2 线程结束
    t3.join(); // 等待 t3 线程结束

    return 0; // 主函数返回 0
}
