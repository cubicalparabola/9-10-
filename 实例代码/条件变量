#include <iostream>
#include <queue>
#include <thread>
#include <mutex>
#include <condition_variable>

using namespace std;
queue<int> que; // 共享队列
mutex mtx; // 保护队列的互斥锁
condition_variable condition; // 条件变量
bool finished = false; // 结束标志

void producer() {
    for (int i = 0; i < 10; ++i) {
        unique_lock<mutex> lock(mtx); // 获取互斥锁
        que.push(i); // 向队列中添加元素
        lock.unlock(); // 释放互斥锁
        condition.notify_one(); // 唤醒一个等待的消费者线程
    }
    finished = true; // 设置结束标志为真
    condition.notify_one(); // 唤醒一个等待的消费者线程
}

void consumer() {
    while (true) {
        unique_lock<mutex> lock(mtx); // 获取互斥锁
        condition.wait(lock, [] { return !que.empty() || finished; }); // 等待队列非空或收到结束信号
        if (finished && que.empty()) { // 如果收到结束信号且队列为空，则退出循环，结束线程
            return;
        }
        int value = que.front(); // 获取队列中的第一个元素
        que.pop(); // 从队列中移除第一个元素
        lock.unlock(); // 释放互斥锁
        cout << "Consumer got: " << value << endl; // 输出获取到的元素值
    }
}

int main() {
    thread t1(producer); // 创建生产者线程
    thread t2(consumer); // 创建消费者线程

    t1.join(); // 等待生产者线程结束
    t2.join(); // 等待消费者线程结束

    return 0;
}
